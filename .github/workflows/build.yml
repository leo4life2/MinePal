name: Build Electron App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos-intel:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm install --include=dev
          cd frontend
          npm install --include=dev

      - name: Build frontend with Vite
        run: |
          cd frontend
          npx vite build

      - name: Install & Build Submodules
        run: |
          for dir in ./libs/*; do
            if [ -f "$dir/package.json" ]; then
              cd "$dir"
              npm install
              if [ -f "./tsconfig.json" ]; then
                npm run build
              fi
              cd -
            fi
          done

      - name: Prepare for code signing
        run: |
          mkdir -p ~/private_keys/
          echo "${{ secrets.MAC_CERTS }}" | base64 --decode > ~/private_keys/certs.p12
          echo "${{ secrets.NOTA_CERT }}" | base64 --decode > ~/private_keys/notarize.p8
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ~/private_keys/certs.p12 -k build.keychain -P "${{ secrets.MAC_CERTS_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build Electron app (macOS - Intel)
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: false  # We'll handle release manually
          args: --mac --x64
        env:
          CSC_LINK: file:///Users/runner/private_keys/certs.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          API_KEY_ID: ${{ vars.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ vars.API_KEY_ISSUER_ID }}

      - name: Organize Intel build for release
        run: |
          mkdir -p release/intel
          cp -r dist/* release/intel/
          ls -la release/intel/

      - name: Upload Intel build to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: release/intel/**/*
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos-arm:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm install --include=dev
          cd frontend
          npm install --include=dev

      - name: Build frontend with Vite
        run: |
          cd frontend
          npx vite build

      - name: Install & Build Submodules
        run: |
          for dir in ./libs/*; do
            if [ -f "$dir/package.json" ]; then
              cd "$dir"
              npm install
              if [ -f "./tsconfig.json" ]; then
                npm run build
              fi
              cd -
            fi
          done

      - name: Prepare for code signing
        run: |
          mkdir -p ~/private_keys/
          echo "${{ secrets.MAC_CERTS }}" | base64 --decode > ~/private_keys/certs.p12
          echo "${{ secrets.NOTA_CERT }}" | base64 --decode > ~/private_keys/notarize.p8
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ~/private_keys/certs.p12 -k build.keychain -P "${{ secrets.MAC_CERTS_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build Electron app (macOS - ARM)
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: false  # We'll handle release manually
          args: --mac --arm64
        env:
          CSC_LINK: file:///Users/runner/private_keys/certs.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          API_KEY_ID: ${{ vars.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ vars.API_KEY_ISSUER_ID }}

      - name: Organize ARM build for release
        run: |
          mkdir -p release/arm64
          cp -r dist/* release/arm64/
          ls -la release/arm64/

      - name: Upload ARM build to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: release/arm64/**/*
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-non-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm install --include=dev
          cd frontend
          npm install --include=dev

      - name: Build frontend with Vite
        run: |
          cd frontend
          npx vite build

      - name: Install & Build Submodules
        shell: bash
        run: |
          for dir in ./libs/*/; do
            if [ -f "${dir}package.json" ]; then
              cd "$dir"
              npm install
              if [ -f "./tsconfig.json" ]; then
                if npm run | grep -q "build"; then
                  npm run build
                elif npm run | grep -q "prepare"; then
                  npm run prepare
                fi
              fi
              cd - > /dev/null
            fi
          done

      - name: Build/release Electron app (non-macOS)
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
